# coding: utf-8

"""
    MotionScan REST API

     ### MotionScan REST API description ###   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CleanedDataItem(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ltArmAccX",
            "rtArmAccY",
            "rtArmAccZ",
            "ltArmAccZ",
            "ltArmAccY",
            "rtArmAccX",
            "ltLegGyroX",
            "ltLegGyroZ",
            "ltLegGyroY",
            "ltLegAccX",
            "ltLegAccY",
            "ltLegAccZ",
            "timestamp",
            "ltArmGyroY",
            "ltArmGyroZ",
            "rtArmGyroX",
            "ltArmGyroX",
            "rtLegGyroX",
            "rtLegGyroZ",
            "rtLegGyroY",
            "rtArmGyroY",
            "rtLegAccZ",
            "rtArmGyroZ",
            "rtLegAccY",
            "rtLegAccX",
        }
        
        class properties:
            
            
            class timestamp(
                schemas.DateTimeBase,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'timestamp':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltLegAccX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltLegAccX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltLegAccY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltLegAccY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltLegAccZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltLegAccZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltLegGyroX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltLegGyroX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltLegGyroY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltLegGyroY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltLegGyroZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltLegGyroZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltArmAccX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltArmAccX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltArmAccY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltArmAccY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltArmAccZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltArmAccZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltArmGyroX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltArmGyroX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltArmGyroY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltArmGyroY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ltArmGyroZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ltArmGyroZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtLegAccX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtLegAccX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtLegAccY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtLegAccY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtLegAccZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtLegAccZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtLegGyroX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtLegGyroX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtLegGyroY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtLegGyroY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtLegGyroZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtLegGyroZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtArmAccX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtArmAccX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtArmAccY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtArmAccY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtArmAccZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtArmAccZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtArmGyroX(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtArmGyroX':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtArmGyroY(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtArmGyroY':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class rtArmGyroZ(
                schemas.Float64Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rtArmGyroZ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class patientId(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'patientId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class serial_number(
                schemas.Int32Base,
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'serial_number':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "timestamp": timestamp,
                "ltLegAccX": ltLegAccX,
                "ltLegAccY": ltLegAccY,
                "ltLegAccZ": ltLegAccZ,
                "ltLegGyroX": ltLegGyroX,
                "ltLegGyroY": ltLegGyroY,
                "ltLegGyroZ": ltLegGyroZ,
                "ltArmAccX": ltArmAccX,
                "ltArmAccY": ltArmAccY,
                "ltArmAccZ": ltArmAccZ,
                "ltArmGyroX": ltArmGyroX,
                "ltArmGyroY": ltArmGyroY,
                "ltArmGyroZ": ltArmGyroZ,
                "rtLegAccX": rtLegAccX,
                "rtLegAccY": rtLegAccY,
                "rtLegAccZ": rtLegAccZ,
                "rtLegGyroX": rtLegGyroX,
                "rtLegGyroY": rtLegGyroY,
                "rtLegGyroZ": rtLegGyroZ,
                "rtArmAccX": rtArmAccX,
                "rtArmAccY": rtArmAccY,
                "rtArmAccZ": rtArmAccZ,
                "rtArmGyroX": rtArmGyroX,
                "rtArmGyroY": rtArmGyroY,
                "rtArmGyroZ": rtArmGyroZ,
                "patientId": patientId,
                "serial_number": serial_number,
            }

    
    ltArmAccX: MetaOapg.properties.ltArmAccX
    rtArmAccY: MetaOapg.properties.rtArmAccY
    rtArmAccZ: MetaOapg.properties.rtArmAccZ
    ltArmAccZ: MetaOapg.properties.ltArmAccZ
    ltArmAccY: MetaOapg.properties.ltArmAccY
    rtArmAccX: MetaOapg.properties.rtArmAccX
    ltLegGyroX: MetaOapg.properties.ltLegGyroX
    ltLegGyroZ: MetaOapg.properties.ltLegGyroZ
    ltLegGyroY: MetaOapg.properties.ltLegGyroY
    ltLegAccX: MetaOapg.properties.ltLegAccX
    ltLegAccY: MetaOapg.properties.ltLegAccY
    ltLegAccZ: MetaOapg.properties.ltLegAccZ
    timestamp: MetaOapg.properties.timestamp
    ltArmGyroY: MetaOapg.properties.ltArmGyroY
    ltArmGyroZ: MetaOapg.properties.ltArmGyroZ
    rtArmGyroX: MetaOapg.properties.rtArmGyroX
    ltArmGyroX: MetaOapg.properties.ltArmGyroX
    rtLegGyroX: MetaOapg.properties.rtLegGyroX
    rtLegGyroZ: MetaOapg.properties.rtLegGyroZ
    rtLegGyroY: MetaOapg.properties.rtLegGyroY
    rtArmGyroY: MetaOapg.properties.rtArmGyroY
    rtLegAccZ: MetaOapg.properties.rtLegAccZ
    rtArmGyroZ: MetaOapg.properties.rtArmGyroZ
    rtLegAccY: MetaOapg.properties.rtLegAccY
    rtLegAccX: MetaOapg.properties.rtLegAccX
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltLegAccX"]) -> MetaOapg.properties.ltLegAccX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltLegAccY"]) -> MetaOapg.properties.ltLegAccY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltLegAccZ"]) -> MetaOapg.properties.ltLegAccZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltLegGyroX"]) -> MetaOapg.properties.ltLegGyroX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltLegGyroY"]) -> MetaOapg.properties.ltLegGyroY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltLegGyroZ"]) -> MetaOapg.properties.ltLegGyroZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltArmAccX"]) -> MetaOapg.properties.ltArmAccX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltArmAccY"]) -> MetaOapg.properties.ltArmAccY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltArmAccZ"]) -> MetaOapg.properties.ltArmAccZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltArmGyroX"]) -> MetaOapg.properties.ltArmGyroX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltArmGyroY"]) -> MetaOapg.properties.ltArmGyroY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ltArmGyroZ"]) -> MetaOapg.properties.ltArmGyroZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtLegAccX"]) -> MetaOapg.properties.rtLegAccX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtLegAccY"]) -> MetaOapg.properties.rtLegAccY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtLegAccZ"]) -> MetaOapg.properties.rtLegAccZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtLegGyroX"]) -> MetaOapg.properties.rtLegGyroX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtLegGyroY"]) -> MetaOapg.properties.rtLegGyroY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtLegGyroZ"]) -> MetaOapg.properties.rtLegGyroZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtArmAccX"]) -> MetaOapg.properties.rtArmAccX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtArmAccY"]) -> MetaOapg.properties.rtArmAccY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtArmAccZ"]) -> MetaOapg.properties.rtArmAccZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtArmGyroX"]) -> MetaOapg.properties.rtArmGyroX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtArmGyroY"]) -> MetaOapg.properties.rtArmGyroY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtArmGyroZ"]) -> MetaOapg.properties.rtArmGyroZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["patientId"]) -> MetaOapg.properties.patientId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "ltLegAccX", "ltLegAccY", "ltLegAccZ", "ltLegGyroX", "ltLegGyroY", "ltLegGyroZ", "ltArmAccX", "ltArmAccY", "ltArmAccZ", "ltArmGyroX", "ltArmGyroY", "ltArmGyroZ", "rtLegAccX", "rtLegAccY", "rtLegAccZ", "rtLegGyroX", "rtLegGyroY", "rtLegGyroZ", "rtArmAccX", "rtArmAccY", "rtArmAccZ", "rtArmGyroX", "rtArmGyroY", "rtArmGyroZ", "patientId", "serial_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltLegAccX"]) -> MetaOapg.properties.ltLegAccX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltLegAccY"]) -> MetaOapg.properties.ltLegAccY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltLegAccZ"]) -> MetaOapg.properties.ltLegAccZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltLegGyroX"]) -> MetaOapg.properties.ltLegGyroX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltLegGyroY"]) -> MetaOapg.properties.ltLegGyroY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltLegGyroZ"]) -> MetaOapg.properties.ltLegGyroZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltArmAccX"]) -> MetaOapg.properties.ltArmAccX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltArmAccY"]) -> MetaOapg.properties.ltArmAccY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltArmAccZ"]) -> MetaOapg.properties.ltArmAccZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltArmGyroX"]) -> MetaOapg.properties.ltArmGyroX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltArmGyroY"]) -> MetaOapg.properties.ltArmGyroY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ltArmGyroZ"]) -> MetaOapg.properties.ltArmGyroZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtLegAccX"]) -> MetaOapg.properties.rtLegAccX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtLegAccY"]) -> MetaOapg.properties.rtLegAccY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtLegAccZ"]) -> MetaOapg.properties.rtLegAccZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtLegGyroX"]) -> MetaOapg.properties.rtLegGyroX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtLegGyroY"]) -> MetaOapg.properties.rtLegGyroY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtLegGyroZ"]) -> MetaOapg.properties.rtLegGyroZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtArmAccX"]) -> MetaOapg.properties.rtArmAccX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtArmAccY"]) -> MetaOapg.properties.rtArmAccY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtArmAccZ"]) -> MetaOapg.properties.rtArmAccZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtArmGyroX"]) -> MetaOapg.properties.rtArmGyroX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtArmGyroY"]) -> MetaOapg.properties.rtArmGyroY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtArmGyroZ"]) -> MetaOapg.properties.rtArmGyroZ: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["patientId"]) -> typing.Union[MetaOapg.properties.patientId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "ltLegAccX", "ltLegAccY", "ltLegAccZ", "ltLegGyroX", "ltLegGyroY", "ltLegGyroZ", "ltArmAccX", "ltArmAccY", "ltArmAccZ", "ltArmGyroX", "ltArmGyroY", "ltArmGyroZ", "rtLegAccX", "rtLegAccY", "rtLegAccZ", "rtLegGyroX", "rtLegGyroY", "rtLegGyroZ", "rtArmAccX", "rtArmAccY", "rtArmAccZ", "rtArmGyroX", "rtArmGyroY", "rtArmGyroZ", "patientId", "serial_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltArmAccX: typing.Union[MetaOapg.properties.ltArmAccX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtArmAccY: typing.Union[MetaOapg.properties.rtArmAccY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtArmAccZ: typing.Union[MetaOapg.properties.rtArmAccZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltArmAccZ: typing.Union[MetaOapg.properties.ltArmAccZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltArmAccY: typing.Union[MetaOapg.properties.ltArmAccY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtArmAccX: typing.Union[MetaOapg.properties.rtArmAccX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltLegGyroX: typing.Union[MetaOapg.properties.ltLegGyroX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltLegGyroZ: typing.Union[MetaOapg.properties.ltLegGyroZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltLegGyroY: typing.Union[MetaOapg.properties.ltLegGyroY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltLegAccX: typing.Union[MetaOapg.properties.ltLegAccX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltLegAccY: typing.Union[MetaOapg.properties.ltLegAccY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltLegAccZ: typing.Union[MetaOapg.properties.ltLegAccZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltArmGyroY: typing.Union[MetaOapg.properties.ltArmGyroY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltArmGyroZ: typing.Union[MetaOapg.properties.ltArmGyroZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtArmGyroX: typing.Union[MetaOapg.properties.rtArmGyroX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        ltArmGyroX: typing.Union[MetaOapg.properties.ltArmGyroX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtLegGyroX: typing.Union[MetaOapg.properties.rtLegGyroX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtLegGyroZ: typing.Union[MetaOapg.properties.rtLegGyroZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtLegGyroY: typing.Union[MetaOapg.properties.rtLegGyroY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtArmGyroY: typing.Union[MetaOapg.properties.rtArmGyroY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtLegAccZ: typing.Union[MetaOapg.properties.rtLegAccZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtArmGyroZ: typing.Union[MetaOapg.properties.rtArmGyroZ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtLegAccY: typing.Union[MetaOapg.properties.rtLegAccY, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        rtLegAccX: typing.Union[MetaOapg.properties.rtLegAccX, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        patientId: typing.Union[MetaOapg.properties.patientId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CleanedDataItem':
        return super().__new__(
            cls,
            *_args,
            ltArmAccX=ltArmAccX,
            rtArmAccY=rtArmAccY,
            rtArmAccZ=rtArmAccZ,
            ltArmAccZ=ltArmAccZ,
            ltArmAccY=ltArmAccY,
            rtArmAccX=rtArmAccX,
            ltLegGyroX=ltLegGyroX,
            ltLegGyroZ=ltLegGyroZ,
            ltLegGyroY=ltLegGyroY,
            ltLegAccX=ltLegAccX,
            ltLegAccY=ltLegAccY,
            ltLegAccZ=ltLegAccZ,
            timestamp=timestamp,
            ltArmGyroY=ltArmGyroY,
            ltArmGyroZ=ltArmGyroZ,
            rtArmGyroX=rtArmGyroX,
            ltArmGyroX=ltArmGyroX,
            rtLegGyroX=rtLegGyroX,
            rtLegGyroZ=rtLegGyroZ,
            rtLegGyroY=rtLegGyroY,
            rtArmGyroY=rtArmGyroY,
            rtLegAccZ=rtLegAccZ,
            rtArmGyroZ=rtArmGyroZ,
            rtLegAccY=rtLegAccY,
            rtLegAccX=rtLegAccX,
            patientId=patientId,
            serial_number=serial_number,
            _configuration=_configuration,
            **kwargs,
        )
