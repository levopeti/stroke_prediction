# coding: utf-8

"""
    MotionScan REST API

     ### MotionScan REST API description ###   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Metadata(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "measurementId",
        }
        
        class properties:
            measurementId = schemas.AnyTypeSchema
            softwareVersion = schemas.AnyTypeSchema
            APIVersion = schemas.AnyTypeSchema
            __annotations__ = {
                "measurementId": measurementId,
                "softwareVersion": softwareVersion,
                "APIVersion": APIVersion,
            }

    
    measurementId: MetaOapg.properties.measurementId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurementId"]) -> MetaOapg.properties.measurementId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareVersion"]) -> MetaOapg.properties.softwareVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["APIVersion"]) -> MetaOapg.properties.APIVersion: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["measurementId", "softwareVersion", "APIVersion", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurementId"]) -> MetaOapg.properties.measurementId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareVersion"]) -> typing.Union[MetaOapg.properties.softwareVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["APIVersion"]) -> typing.Union[MetaOapg.properties.APIVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["measurementId", "softwareVersion", "APIVersion", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        measurementId: typing.Union[MetaOapg.properties.measurementId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        softwareVersion: typing.Union[MetaOapg.properties.softwareVersion, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        APIVersion: typing.Union[MetaOapg.properties.APIVersion, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Metadata':
        return super().__new__(
            cls,
            *_args,
            measurementId=measurementId,
            softwareVersion=softwareVersion,
            APIVersion=APIVersion,
            _configuration=_configuration,
            **kwargs,
        )
